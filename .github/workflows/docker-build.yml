name: Build and Push Docker Images

on:
  schedule:
    - cron: '0 0 * * *'  # 每天0:00 UTC运行
  workflow_dispatch:  # 保留手动触发功能

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y jq  # 使用apt安装jq

      - name: Clone repositories
        run: |
          for i in $(seq 0 $(($(yq '.repositories | length' config.yaml) - 1))); do
            name=$(yq ".repositories[$i].name" config.yaml)
            repo_dir="dockerfiles/$name/repo"

            echo "$repo_dir"
            mkdir -p "$repo_dir"

            git clone $(yq ".repositories[$i].repo_url" config.yaml) $repo_dir
            ls -l "$repo_dir"
          done

      - name: Download releases
        run: |
          for i in $(seq 0 $(($(yq '.repositories | length' config.yaml) - 1))); do
            # 修改目录结构为 dockerfiles/name/release
            name=$(yq ".repositories[$i].name" config.yaml)
            release_dir="dockerfiles/$name/release"
            echo "$release_dir"
            mkdir -p "$release_dir"
            
            repo_url=$(yq ".repositories[$i].repo_url" config.yaml)
            owner=$(echo "$repo_url" | sed -n 's#https://github.com/\([^/]*\)/\([^/]*\)\.git#\1#p')
            repo=$(echo "$repo_url" | sed -n 's#https://github.com/\([^/]*\)/\([^/]*\)\.git#\2#p')
            
            # 获取配置中的release_name，如果未配置则使用默认格式
            release_name=$(yq ".repositories[$i].release_name" config.yaml)
            if [ "$release_name" == "null" ]; then
              echo "错误：$name 未配置 release_name，跳过下载"
              continue
            fi
            
            # 获取最新release的信息
            latest_release=$(curl -s "https://api.github.com/repos/${owner}/${repo}/releases/latest")
            latest_tag=$(echo "$latest_release" | jq -r '.tag_name')
            
            # 从assets中查找匹配release_name的文件
            download_url=$(echo "$latest_release" | jq -r --arg name "$release_name" '.assets[] | select(.name | contains($name)) | .browser_download_url')
            
            if [ -z "$download_url" ]; then
              echo "错误：未找到匹配 $release_name 的资源，跳过下载"
              continue
            fi
            
            echo "下载 $download_url 到 $release_dir/${release_name}"
            curl -L -o "$release_dir/${release_name}" "$download_url"
            
            # 确保解压后的文件名正确
            tar xzf "$release_dir/${release_name}" -C "$release_dir"
            echo "解压后的文件列表："
            ls -l "$release_dir"
          done

      - name: Build and push images
        run: |
          for i in $(seq 0 $(($(yq '.repositories | length' config.yaml) - 1))); do
            name=$(yq ".repositories[$i].name" config.yaml)
            repo_url=$(yq ".repositories[$i].repo_url" config.yaml)
            branch=$(yq ".repositories[$i].branch" config.yaml)
            
            if [ -z "$repo_url" ] || [ "$repo_url" == "null" ]; then
              echo "Error: repo_url is empty for $name"
              exit 1
            fi
            
            dockerfile="./dockerfiles/$name/Dockerfile"
            image_name="${{ secrets.DOCKERHUB_USERNAME }}/$name"
            
            echo "Processing $name..."
            
            # 构建参数
            build_args=""
            work_dir="dockerfiles/$name"
            if echo "$repo" | yq '.build_args' - | grep -q .; then
              echo "Processing build args..."
              while IFS= read -r line; do
                if [[ -n "$line" ]]; then
                  key=$(echo "$line" | cut -d: -f1)
                  value=$(echo "$line" | cut -d: -f2- | sed 's/^[[:space:]]//')
                  echo "Adding build arg: $key=$value"
                  build_args="$build_args --build-arg $key=$value"
                fi
              done < <(echo "$repo" | yq '.build_args | to_entries | .[] | .key + ": " + .value' -)
              echo "Final build args: $build_args"
            fi
            
            # 构建并推送镜像
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              $build_args \
              -t "$image_name:latest" \
              -t "$image_name:$(date +%Y%m%d)" \
              -f "$dockerfile" \
              "$work_dir" \
              --push
            
            echo "Successfully built and pushed $image_name"
          done <<< "$repos"